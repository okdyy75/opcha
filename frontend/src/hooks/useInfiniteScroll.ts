import { useState, useEffect, useCallback } from 'react';
import { Room } from '@/types';
import { apiClient } from '@/lib/api';

interface UseInfiniteScrollProps {
  initialRooms: Room[];
}

interface UseInfiniteScrollReturn {
  rooms: Room[];
  hasMore: boolean;
  loading: boolean;
  loadMore: () => Promise<void>;
}

export function useInfiniteScroll({ initialRooms }: UseInfiniteScrollProps): UseInfiniteScrollReturn {
  const [rooms, setRooms] = useState<Room[]>(initialRooms);
  const [hasMore, setHasMore] = useState(true);
  const [loading, setLoading] = useState(false);
  const [currentOffset, setCurrentOffset] = useState(0);

  // ÂàùÊúü„É´„Éº„É†„ÅåÊõ¥Êñ∞„Åï„Çå„ÅüÊôÇ„Å´state„ÇíÂêåÊúü
  useEffect(() => {
    console.log('üîÑ Initial rooms updated:', initialRooms.length);
    setRooms(initialRooms);
    setCurrentOffset(initialRooms.length); // Ê¨°Âõû„ÅÆ„Ç™„Éï„Çª„ÉÉ„Éà„ÇíË®≠ÂÆö
    setHasMore(initialRooms.length >= 20); // ÂàùÊúü„É≠„Éº„ÉâÊï∞„Å´Âü∫„Å•„ÅÑ„Å¶hasMore„ÇíË®≠ÂÆö
  }, [initialRooms]);

  const loadMore = useCallback(async () => {
    if (loading || !hasMore) return;

    setLoading(true);
    try {
      console.log('üìÑ Loading more rooms, offset:', currentOffset);
      
      const response = await apiClient.getRooms({ 
        limit: 20, 
        offset: currentOffset 
      });

      console.log('üì¶ Load more response:', response);

      if (response.error) {
        console.error('‚ùå Load more error:', response.error);
        setHasMore(false);
        return;
      }

      if (response.data?.rooms) {
        const newRooms = response.data.rooms;
        console.log('‚úÖ New rooms loaded:', newRooms.length);
        
        if (newRooms.length > 0) {
          setRooms(prev => [...prev, ...newRooms]);
          setCurrentOffset(prev => prev + newRooms.length);
          
          // ÂèñÂæó„Åó„Åü‰ª∂Êï∞„ÅåË¶ÅÊ±Ç„Åó„Åü‰ª∂Êï∞„Çà„ÇäÂ∞ë„Å™„ÅÑÂ†¥Âêà„ÅØÁµÇ‰∫Ü
          setHasMore(newRooms.length >= 20);
        } else {
          setHasMore(false);
        }
      } else {
        setHasMore(false);
      }
    } catch (error) {
      console.error('‚ùå Load more exception:', error);
      setHasMore(false);
    } finally {
      setLoading(false);
    }
  }, [currentOffset, loading, hasMore]);

  return {
    rooms,
    hasMore,
    loading,
    loadMore
  };
}